{
  "scopeName": "source.gn",
  "patterns": [
    {
      "include": "#expression"
    }
  ],
  "repository": {
    "expression": {
      "patterns": [
        {
          "include": "#keywords"
        },
        {
          "include": "#builtins"
        },
        {
          "include": "#call"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#literals"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "keywords": {
      "match": "\\b(if|else)\\b",
      "name": "keyword.control.if.gn"
    },
    "builtins": {
      "patterns": [
        {
          "match": "\\b(action|action_foreach|bundle_data|copy|create_bundle|executable|generated_file|group|loadable_module|rust_library|rust_proc_macro|shared_library|source_set|static_library|target)\\b",
          "name": "support.function.gn"
        },
        {
          "match": "\\b(assert|config|declare_args|defined|exec_script|filter_exclude|filter_include|filter_labels_exclude|filter_labels_include|foreach|forward_variables_from|get_label_info|get_path_info|get_target_outputs|getenv|import|label_matches|not_needed|pool|print|print_stack_trace|process_file_template|read_file|rebase_path|set_default_toolchain|set_defaults|split_list|string_join|string_replace|string_split|template|tool|toolchain|write_file)\\b",
          "name": "support.function.gn"
        },
        {
          "match": "\\b(current_cpu|current_os|current_toolchain|default_toolchain|gn_version|host_cpu|host_os|invoker|python_path|root_build_dir|root_gen_dir|root_out_dir|target_cpu|target_gen_dir|target_name|target_os|target_out_dir)\\b",
          "name": "variable.language.gn"
        },
        {
          "match": "\\b(aliased_deps|all_dependent_configs|allow_circular_includes_from|arflags|args|asmflags|assert_no_deps|bridge_header|bundle_contents_dir|bundle_deps_filter|bundle_executable_dir|bundle_resources_dir|bundle_root_dir|cflags|cflags_c|cflags_cc|cflags_objc|cflags_objcc|check_includes|code_signing_args|code_signing_outputs|code_signing_script|code_signing_sources|complete_static_lib|configs|contents|crate_name|crate_root|crate_type|data|data_deps|data_keys|defines|depfile|deps|externs|framework_dirs|frameworks|friend|gen_deps|include_dirs|inputs|ldflags|lib_dirs|libs|metadata|mnemonic|module_name|output_conversion|output_dir|output_extension|output_name|output_prefix_override|outputs|partial_info_plist|pool|post_processing_args|post_processing_outputs|post_processing_script|post_processing_sources|precompiled_header|precompiled_header_type|precompiled_source|product_type|public|public_configs|public_deps|rebase|response_file_contents|rustflags|script|sources|swiftflags|testonly|transparent|visibility|walk_keys|weak_frameworks|write_runtime_deps|xcasset_compiler_flags|xcode_extra_attributes|xcode_test_application_name)\\b",
          "name": "variable.language.gn"
        }
      ]
    },
    "call": {
      "begin": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.gn"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "identifier": {
      "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
      "name": "variable.general.gn"
    },
    "operators": {
      "match": "\\b(\\+|\\+=|==|!=|-|-=|<|<=|!|=|>|>=|&&|\\|\\|\\.)\\b",
      "name": "keyword.operator.gn"
    },
    "literals": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#number"
        },
        {
          "include": "#boolean"
        }
      ]
    },
    "string": {
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "match": "\\\\[\"$\\\\]",
          "name": "constant.character.escape.gn"
        },
        {
          "match": "\\$0x[0-9A-Fa-f][0-9A-Fa-f]",
          "name": "constant.character.hex.gn"
        },
        {
          "begin": "\\$\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.gn"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.gn"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "contentName": "meta.embedded.substitution.gn"
        },
        {
          "match": "(\\$)([A-Za-z_][A-Za-z0-9_]*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.template-expression.begin.gn"
            },
            "2": {
              "name": "meta.embedded.substitution.gn variable.general.gn"
            }
          }
        }
      ],
      "name": "string.quoted.double.gn"
    },
    "number": {
      "match": "\\b-?\\d+\\b",
      "name": "constant.numeric.gn"
    },
    "boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean.gn"
    },
    "comment": {
      "begin": "#",
      "end": "$",
      "name": "comment.line.number-sign.gn"
    }
  }
}
